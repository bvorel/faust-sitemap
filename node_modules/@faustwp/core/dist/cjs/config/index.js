"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.normalizeConfig = exports.setConfig = void 0;
const defaults_js_1 = __importDefault(require("lodash/defaults.js"));
const extend_js_1 = __importDefault(require("lodash/extend.js"));
const isString_js_1 = __importDefault(require("lodash/isString.js"));
const once_js_1 = __importDefault(require("lodash/once.js"));
const index_js_1 = require("../wpHooks/index.js");
const log_js_1 = require("../utils/log.js");
let config;
function setConfig(_config) {
    return (0, once_js_1.default)(() => {
        config = _config;
        const { experimentalPlugins, plugins } = _config;
        // combine both sets of plugins until experimentalPlugins is fully deprecated
        const allSupportedPlugins = [
            ...(experimentalPlugins || []),
            ...(plugins || []),
        ];
        allSupportedPlugins === null || allSupportedPlugins === void 0 ? void 0 : allSupportedPlugins.forEach((plugin) => {
            var _a;
            (_a = plugin === null || plugin === void 0 ? void 0 : plugin.apply) === null || _a === void 0 ? void 0 : _a.call(plugin, index_js_1.hooks);
        });
        if (experimentalPlugins === null || experimentalPlugins === void 0 ? void 0 : experimentalPlugins.length) {
            // log to cli if experimentalPlugins is used since it's being deprecated
            (0, log_js_1.warnLog)('Plugin System: The "experimentalPlugins" configuration option will be deprecated in the near future. Please use "plugins" instead in the faust.config.js.');
        }
    })();
}
exports.setConfig = setConfig;
function normalizeConfig(_config) {
    const cfg = (0, defaults_js_1.default)({}, _config, {
        loginPagePath: '/login',
        experimentalToolbar: false,
        usePersistedQueries: false,
        useGETForQueries: true,
        basePath: '',
    });
    Object.keys(cfg).forEach((key) => {
        const keyValue = key;
        const value = cfg[keyValue];
        if ((0, isString_js_1.default)(value)) {
            cfg[keyValue] = value.trim();
        }
    });
    if (cfg.experimentalToolbar) {
        console.warn(`[Faust.js] As the team shifts focus to new work on [Headless WordPress](https://github.com/wpengine/hwptoolkit), the Admin Toolbar, which was ~~experimental~~, will no longer be actively maintained. No further updates will be made.`);
    }
    return (0, extend_js_1.default)(cfg, {});
}
exports.normalizeConfig = normalizeConfig;
function getConfig() {
    return normalizeConfig(config);
}
exports.getConfig = getConfig;
