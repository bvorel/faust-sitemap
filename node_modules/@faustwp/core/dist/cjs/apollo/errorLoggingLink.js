"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorLoggingLink = void 0;
const client_1 = require("@apollo/client");
const log_js_1 = require("../utils/log.js");
/**
 * Checks if the given error is a server error.
 * @param error The error to check.
 * @returns A boolean indicating whether the error is a server error.
 */
function isServerError(error) {
    if (typeof error === 'object' &&
        error !== null &&
        'response' in error &&
        'result' in error &&
        'statusCode' in error) {
        return true;
    }
    return false;
}
/**
 * Apollo Link that captures GraphQL errors and server errors, and prints them into the console.
 */
class ErrorLoggingLink extends client_1.ApolloLink {
    /**
     * Intercepts each GraphQL operation request.
     * @param operation The GraphQL operation being executed.
     * @param forward The next link in the chain to delegate the operation to.
     * @returns An Observable with the operation result or error.
     */
    // eslint-disable-next-line class-methods-use-this
    request(operation, forward) {
        return new client_1.Observable((observer) => {
            const subscription = forward(operation).subscribe({
                next: (result) => {
                    // Check if there are GraphQL errors in the result
                    if (result.errors && result.errors.length > 0) {
                        (0, log_js_1.errorLog)('GraphQL errors:', result.errors);
                    }
                    observer.next(result);
                },
                error: (error) => {
                    // Check if the error is a server error
                    if (isServerError(error)) {
                        (0, log_js_1.errorLog)('Server error:', error);
                        (0, log_js_1.errorLog)('Fetch result:', error.result);
                    }
                    else {
                        (0, log_js_1.errorLog)('Network error:', error);
                    }
                    observer.error(error);
                },
                complete: () => {
                    observer.complete();
                },
            });
            return () => {
                subscription.unsubscribe();
            };
        });
    }
}
exports.ErrorLoggingLink = ErrorLoggingLink;
