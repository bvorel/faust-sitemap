import React from 'react';
import { gql, useQuery } from '@apollo/client';
import { getApolloAuthClient } from '../../../client.js';
import { useLogout } from '../../../hooks/useLogout.js';
import { useAuth } from '../../../hooks/useAuth.js';
import { getAdminUrl } from '../../../lib/getAdminUrl.js';
import { ToolbarItem, ToolbarNodeSkeleton, ToolbarSubmenu, ToolbarSubmenuWrapper, } from '../index.js';
export function AuthenticatedAccount() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    const client = getApolloAuthClient();
    const { logout } = useLogout();
    const { data, loading } = useQuery(gql `
			{
				viewer {
					name
					username
					avatar26: avatar(size: 26) {
						url
					}
					avatar52: avatar(size: 52) {
						url
					}
					avatar64: avatar(size: 64) {
						url
					}
					avatar128: avatar(size: 128) {
						url
					}
				}
			}
		`, { client });
    if (loading) {
        return React.createElement(ToolbarNodeSkeleton, null);
    }
    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            void logout();
        }
    };
    const handleClick = (e) => {
        e.preventDefault();
        void logout();
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(ToolbarItem, { "aria-haspopup": "true" },
            "Howdy, ",
            React.createElement("span", { className: "display-name" }, (_a = data === null || data === void 0 ? void 0 : data.viewer) === null || _a === void 0 ? void 0 : _a.name),
            ((_c = (_b = data === null || data === void 0 ? void 0 : data.viewer) === null || _b === void 0 ? void 0 : _b.avatar64) === null || _c === void 0 ? void 0 : _c.url) ? (React.createElement("img", { alt: "", src: (_e = (_d = data === null || data === void 0 ? void 0 : data.viewer) === null || _d === void 0 ? void 0 : _d.avatar26) === null || _e === void 0 ? void 0 : _e.url, srcSet: `${(_g = (_f = data === null || data === void 0 ? void 0 : data.viewer) === null || _f === void 0 ? void 0 : _f.avatar52) === null || _g === void 0 ? void 0 : _g.url} 2x`, className: "avatar avatar-26 photo", height: "26", width: "26", loading: "lazy", decoding: "async" })) : null),
        React.createElement(ToolbarSubmenuWrapper, null,
            React.createElement(ToolbarSubmenu, { id: "wp-admin-bar-user-actions" },
                React.createElement("li", { id: "wp-admin-bar-user-info" },
                    React.createElement(ToolbarItem, { tabIndex: -1, href: getAdminUrl('profile.php') },
                        ((_j = (_h = data === null || data === void 0 ? void 0 : data.viewer) === null || _h === void 0 ? void 0 : _h.avatar64) === null || _j === void 0 ? void 0 : _j.url) ? (React.createElement("img", { alt: "", src: (_l = (_k = data === null || data === void 0 ? void 0 : data.viewer) === null || _k === void 0 ? void 0 : _k.avatar64) === null || _l === void 0 ? void 0 : _l.url, srcSet: `${(_o = (_m = data === null || data === void 0 ? void 0 : data.viewer) === null || _m === void 0 ? void 0 : _m.avatar128) === null || _o === void 0 ? void 0 : _o.url} 2x`, className: "avatar avatar-64 photo", height: "64", width: "64", loading: "lazy", decoding: "async" })) : null,
                        React.createElement("span", { className: "display-name" }, (_p = data === null || data === void 0 ? void 0 : data.viewer) === null || _p === void 0 ? void 0 : _p.name),
                        React.createElement("span", { className: "username" }, (_q = data === null || data === void 0 ? void 0 : data.viewer) === null || _q === void 0 ? void 0 : _q.username))),
                React.createElement("li", { id: "wp-admin-bar-edit-profile" },
                    React.createElement(ToolbarItem, { href: getAdminUrl('profile.php') }, "Edit Profile")),
                React.createElement("li", { id: "wp-admin-bar-logout" },
                    React.createElement(ToolbarItem, { href: "#", onKeyDown: handleKeyDown, onClick: handleClick }, "Log Out"))))));
}
export function MyAccount() {
    const { isAuthenticated, isReady } = useAuth({
        strategy: 'redirect',
        shouldRedirect: false,
    });
    if (!isReady) {
        return React.createElement(ToolbarNodeSkeleton, null);
    }
    if (isAuthenticated === true) {
        return React.createElement(AuthenticatedAccount, null);
    }
    return null;
}
